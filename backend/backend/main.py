from backend.pdf_generator import generate_pdf_report
import urllib.parse
from fastapi.middleware.cors import CORSMiddleware
# backend/main.py
from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
from sqlalchemy.orm import Session

from fastapi.staticfiles import StaticFiles 

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List
import os
import json
from datetime import datetime

from google.generativeai.types import BlockedPromptException
from backend.pdf_generator import generate_pdf_report
# ‚úÖ Imports corrig√©s : ajoute "backend." devant chaque module local
import backend.rag_engine as rag_engine
import backend.gemini_handler as gemini_handler
from backend.database import SessionLocal, UserReport, UserMessage
from backend.tasks import send_reminder_email, schedule_call_if_not_downloaded

app = FastAPI(title="Chatbot Intelligent pour Rapports")
# Autoriser le frontend Angular
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:4200"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

class ChatRequest(BaseModel):
    user_id: str
    message: str

class ReportRequest(BaseModel):
    user_id: str
    report_name: str

#√âTAPE 6 : Activer le serveur FastAPI pour servir les fichiers statiques
app.mount("/static", StaticFiles(directory="static"), name="static")

# --- Nouvelle partie : D√©tecte et g√©n√®re un rapport ---
def should_generate_report(message: str) -> tuple[bool, str]:
    """
    V√©rifie si le message contient une demande de cr√©ation de rapport.
    Retourne (True, titre) ou (False, "")
    """
    message_lower = message.lower()
    if "cr√©e un nouveau rapport" in message_lower or "g√©n√®re un rapport" in message_lower:
        # Essaye d'extraire le titre apr√®s "intitul√© :"
        if "intitul√© :" in message:
            title = message.split("intitul√© :")[1].strip()
            return True, title
        elif "intitul√©:" in message:
            title = message.split("intitul√©:")[1].strip()
            return True, title
        else:
            # Titre par d√©faut
            return True, "Rapport sans titre"
    return False, ""

# --- Route /chat mise √† jour ---
@app.post("/chat")
async def chat(request: ChatRequest):
    db = next(get_db())
    
    # Sauvegarde le message utilisateur
    user_message = UserMessage(user_id=request.user_id, message=request.message, sender="user")
    db.add(user_message)
    db.commit()

    # R√©cup√®re l'historique
    user_reports = db.query(UserReport).filter(UserReport.user_id == request.user_id).all()
    last_report_name = user_reports[-1].report_name if user_reports else "Aucun"

    # === üî• D√âTECTION DE CR√âATION DE RAPPORT ===
    message_lower = request.message.lower()
    if ("g√©n√®re un nouveau rapport" in message_lower or 
        "cr√©e un nouveau rapport" in message_lower) and "intitul√© :" in request.message:

        # Extraire le titre
        try:
            report_title = request.message.split("intitul√© :")[1].strip()
        except:
            report_title = "Rapport sans titre"

        # G√©n√©rer le contenu avec Gemini
        prompt = f"R√©dige un rapport complet intitul√© '{report_title}'..."
        try:
            gemini_response = gemini_handler.generate_response(prompt)
        except Exception as e:
            gemini_response = f"Erreur Gemini : {str(e)}"

        # === üìÑ SAUVEGARDER LE RAPPORT EN BASE ===
        new_report = UserReport(
            user_id=request.user_id,
            report_name=report_title,
            plan_json='{"sections": ["intro", "analyse", "conclusion"]}',
            file_path="",
            downloaded=False
        )
        db.add(new_report)
        db.commit()
        db.refresh(new_report)

        # === üìÑ G√âN√àRE LE PDF ===
        pdf_path = generate_pdf_report(
            user_id=request.user_id,
            title=report_title,
            content=gemini_response
        )
        relative_path = pdf_path.replace("static/", "/static/")
        new_report.file_path = relative_path
        db.commit()

        # === üì¨ PLANIFIE EMAIL ET APPEL ===
        download_link = f"http://localhost:8000{relative_path}"
        send_reminder_email.apply_async(
            (request.user_id, new_report.id, download_link),
            countdown=2
        )
        schedule_call_if_not_downloaded.apply_async(
            (request.user_id, new_report.id, download_link),
            countdown=5
        )

        # ‚úÖ R√©ponse au frontend
        response_text = f"‚úÖ Rapport '{report_title}' g√©n√©r√© avec succ√®s ! Un email vous a √©t√© envoy√©."

        # Sauvegarde la r√©ponse du bot
        bot_message = UserMessage(user_id=request.user_id, message=response_text, sender="bot")
        db.add(bot_message)
        db.commit()
        db.close()

        # ‚úÖ RETURN √† l'int√©rieur de la fonction
        return {"response": response_text}

    # === ü§ñ Si ce n'est PAS une demande de rapport, utilise Gemini normalement ===
    context = ""
    if user_reports:
        context = f"\n\nHistorique des rapports : {len(user_reports)} g√©n√©r√©s. Dernier : {last_report_name}"

    full_prompt = f"{request.message}{context}"
    try:
        response = gemini_handler.generate_response(full_prompt)
    except Exception as e:
        response = f"D√©sol√©, une erreur est survenue avec Gemini : {str(e)}"

    # Sauvegarde la r√©ponse
    bot_message = UserMessage(user_id=request.user_id, message=response, sender="bot")
    db.add(bot_message)
    db.commit()
    db.close()

    # ‚úÖ RETURN √† l'int√©rieur de la fonction
    return {"response": response}


@app.post("/generate-report")
async def generate_report(req: ReportRequest):
    db = next(get_db())

    # Simuler g√©n√©ration
    new_report = UserReport(
        user_id=req.user_id,
        report_name=req.report_name,
        plan_json='{{"introduction": "...", "conclusion": "..."}}',
        file_path="",  # sera mis √† jour apr√®s g√©n√©ration PDF
        downloaded=False
    )
    db.add(new_report)
    db.commit()
    db.refresh(new_report)

    # === üîß G√âN√âRER LE CONTENU AVEC GEMINI ===
    prompt = f"""
    Tu es un expert en r√©daction. R√©dige un rapport complet intitul√© '{req.report_name}'.
    Structure : Introduction, D√©veloppement, Conclusion.
    Style : professionnel, clair, concis.
    """

    try:
        gemini_response = gemini_handler.generate_response(prompt)
    except Exception as e:
        gemini_response = "Contenu du rapport indisponible."

    # === üìÑ G√âN√âRER LE PDF ===
    pdf_path = generate_pdf_report(
        user_id=req.user_id,
        title=req.report_name,
        content=gemini_response
    )

    # Sauvegarder le chemin relatif dans la DB
    relative_path = pdf_path.replace("static/", "/static/")
    new_report.file_path = relative_path
    db.commit()

    # === üì¨ ENVOYER UN EMAIL AVEC LIEN DE T√âL√âCHARGEMENT ===
    download_link = f"http://localhost:8000{relative_path}"
    send_reminder_email.apply_async(
        (req.user_id, new_report.id, download_link),
        countdown=2  # Pour test rapide ‚Üí 2 secondes
    )

    # Planifier appel apr√®s 5s (test)
    schedule_call_if_not_downloaded.apply_async(
        (req.user_id, new_report.id, download_link),
        countdown=5
    )

    return {
        "status": "rapport g√©n√©r√©",
        "id": new_report.id,
        "download_link": download_link
    }